{"id":"71fe4add204ae578742c3543a3d9862a","_format":"hh-sol-build-info-1","solcVersion":"0.8.8","solcLongVersion":"0.8.8+commit.dddeac2f","input":{"language":"Solidity","sources":{"contracts/SimpleBankKG.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\ncontract SimpleBankKG {\n    enum AccountType { Checking, Savings }\n\n    struct Account {\n        uint256 checkingBalance;\n        uint256 savingsBalance;\n    }\n\n    mapping(address => Account) private accounts;\n\n    function deposit(AccountType accountType, uint256 amount) public payable {\n        require(msg.value == amount, \"Sent amount not the same as argument amount\");\n\n        if (accountType == AccountType.Checking) {\n            accounts[msg.sender].checkingBalance += amount;\n        } else {\n            accounts[msg.sender].savingsBalance += amount;\n        }\n    }\n\n    function withdraw(AccountType accountType, uint256 amount) public {\n        if (accountType == AccountType.Checking) {\n            require(amount <= accounts[msg.sender].checkingBalance, \"Insufficient checking balance\");\n            accounts[msg.sender].checkingBalance -= amount;\n        } else {\n            require(amount <= accounts[msg.sender].savingsBalance, \"Insufficient savings balance\");\n            accounts[msg.sender].savingsBalance -= amount;\n        }\n        payable(msg.sender).transfer(amount);\n    }\n\n    function transfer(AccountType fromAccountType, address to, uint256 amount) public {\n        if (fromAccountType == AccountType.Checking) {\n            require(amount <= accounts[msg.sender].checkingBalance, \"Insufficient checking balance\");\n            accounts[msg.sender].checkingBalance -= amount;\n            accounts[to].checkingBalance += amount;\n        } else {\n            require(amount <= accounts[msg.sender].savingsBalance, \"Insufficient savings balance\");\n            accounts[msg.sender].savingsBalance -= amount;\n            accounts[to].savingsBalance += amount;\n        }\n    }\n\n    function getBalance(AccountType accountType) public view returns (uint256) {\n        if (accountType == AccountType.Checking) {\n            return accounts[msg.sender].checkingBalance;\n        } else {\n            return accounts[msg.sender].savingsBalance;\n        }\n    }\n}"}},"settings":{"optimizer":{"enabled":true,"mode":"3"},"outputSelection":{"*":{"*":["abi","evm.methodIdentifiers","metadata"],"":["ast"]}}}},"output":{"errors":[{"component":"general","errorCode":null,"formattedMessage":"\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: It looks like you are using '<address payable>.send/transfer(<X>)' without providing    │\n│ the gas amount. Such calls will fail depending on the pubdata costs.                             │\n│ This might be a false positive if you are using an interface (like IERC20) instead of the        │\n│ native Solidity `send/transfer`.                                                                 │\n│ Please use 'payable(<address>).call{value: <X>}(\"\")' instead, but be careful with the reentrancy │\n│ attack. `send` and `transfer` send limited amount of gas that prevents reentrancy, whereas       │\n│ `<address>.call{value: <X>}` sends all gas to the callee. Learn more on                          │\n│ https://docs.soliditylang.org/en/latest/security-considerations.html#reentrancy                  │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘\n--> contracts/SimpleBankKG.sol\n","message":"\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: It looks like you are using '<address payable>.send/transfer(<X>)' without providing    │\n│ the gas amount. Such calls will fail depending on the pubdata costs.                             │\n│ This might be a false positive if you are using an interface (like IERC20) instead of the        │\n│ native Solidity `send/transfer`.                                                                 │\n│ Please use 'payable(<address>).call{value: <X>}(\"\")' instead, but be careful with the reentrancy │\n│ attack. `send` and `transfer` send limited amount of gas that prevents reentrancy, whereas       │\n│ `<address>.call{value: <X>}` sends all gas to the callee. Learn more on                          │\n│ https://docs.soliditylang.org/en/latest/security-considerations.html#reentrancy                  │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘","severity":"warning","sourceLocation":{"file":"0","start":1117,"end":1153},"type":"Warning"}],"version":"0.8.8","long_version":"0.8.8+commit.dddeac2f.Darwin.appleclang","zk_version":"1.3.10","sources":{"contracts/SimpleBankKG.sol":{"id":0,"ast":{"absolutePath":"contracts/SimpleBankKG.sol","exportedSymbols":{"SimpleBankKG":[216]},"id":217,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":216,"linearizedBaseContracts":[216],"name":"SimpleBankKG","nameLocation":"66:12:0","nodeType":"ContractDefinition","nodes":[{"canonicalName":"SimpleBankKG.AccountType","id":4,"members":[{"id":2,"name":"Checking","nameLocation":"104:8:0","nodeType":"EnumValue","src":"104:8:0"},{"id":3,"name":"Savings","nameLocation":"114:7:0","nodeType":"EnumValue","src":"114:7:0"}],"name":"AccountType","nameLocation":"90:11:0","nodeType":"EnumDefinition","src":"85:38:0"},{"canonicalName":"SimpleBankKG.Account","id":9,"members":[{"constant":false,"id":6,"mutability":"mutable","name":"checkingBalance","nameLocation":"162:15:0","nodeType":"VariableDeclaration","scope":9,"src":"154:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5,"name":"uint256","nodeType":"ElementaryTypeName","src":"154:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8,"mutability":"mutable","name":"savingsBalance","nameLocation":"195:14:0","nodeType":"VariableDeclaration","scope":9,"src":"187:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7,"name":"uint256","nodeType":"ElementaryTypeName","src":"187:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Account","nameLocation":"136:7:0","nodeType":"StructDefinition","scope":216,"src":"129:87:0","visibility":"public"},{"constant":false,"id":14,"mutability":"mutable","name":"accounts","nameLocation":"258:8:0","nodeType":"VariableDeclaration","scope":216,"src":"222:44:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Account_$9_storage_$","typeString":"mapping(address => struct SimpleBankKG.Account)"},"typeName":{"id":13,"keyType":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"230:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"222:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Account_$9_storage_$","typeString":"mapping(address => struct SimpleBankKG.Account)"},"valueType":{"id":12,"nodeType":"UserDefinedTypeName","pathNode":{"id":11,"name":"Account","nodeType":"IdentifierPath","referencedDeclaration":9,"src":"241:7:0"},"referencedDeclaration":9,"src":"241:7:0","typeDescriptions":{"typeIdentifier":"t_struct$_Account_$9_storage_ptr","typeString":"struct SimpleBankKG.Account"}}},"visibility":"private"},{"body":{"id":53,"nodeType":"Block","src":"346:290:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":26,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":23,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"364:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":24,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"364:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":25,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19,"src":"377:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"364:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53656e7420616d6f756e74206e6f74207468652073616d6520617320617267756d656e7420616d6f756e74","id":27,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"385:45:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_bae1ad6f1e2c5b6b5ed5b1835735141adc8cf65f6e3c80e8fe90f65896b08e2b","typeString":"literal_string \"Sent amount not the same as argument amount\""},"value":"Sent amount not the same as argument amount"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_bae1ad6f1e2c5b6b5ed5b1835735141adc8cf65f6e3c80e8fe90f65896b08e2b","typeString":"literal_string \"Sent amount not the same as argument amount\""}],"id":22,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"356:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":28,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"356:75:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":29,"nodeType":"ExpressionStatement","src":"356:75:0"},{"condition":{"commonType":{"typeIdentifier":"t_enum$_AccountType_$4","typeString":"enum SimpleBankKG.AccountType"},"id":33,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":30,"name":"accountType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":17,"src":"446:11:0","typeDescriptions":{"typeIdentifier":"t_enum$_AccountType_$4","typeString":"enum SimpleBankKG.AccountType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":31,"name":"AccountType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4,"src":"461:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_AccountType_$4_$","typeString":"type(enum SimpleBankKG.AccountType)"}},"id":32,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Checking","nodeType":"MemberAccess","referencedDeclaration":2,"src":"461:20:0","typeDescriptions":{"typeIdentifier":"t_enum$_AccountType_$4","typeString":"enum SimpleBankKG.AccountType"}},"src":"446:35:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":51,"nodeType":"Block","src":"560:70:0","statements":[{"expression":{"id":49,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":43,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"574:8:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Account_$9_storage_$","typeString":"mapping(address => struct SimpleBankKG.Account storage ref)"}},"id":46,"indexExpression":{"expression":{"id":44,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"583:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":45,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"583:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"574:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_Account_$9_storage","typeString":"struct SimpleBankKG.Account storage ref"}},"id":47,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"savingsBalance","nodeType":"MemberAccess","referencedDeclaration":8,"src":"574:35:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":48,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19,"src":"613:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"574:45:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":50,"nodeType":"ExpressionStatement","src":"574:45:0"}]},"id":52,"nodeType":"IfStatement","src":"442:188:0","trueBody":{"id":42,"nodeType":"Block","src":"483:71:0","statements":[{"expression":{"id":40,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":34,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"497:8:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Account_$9_storage_$","typeString":"mapping(address => struct SimpleBankKG.Account storage ref)"}},"id":37,"indexExpression":{"expression":{"id":35,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"506:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":36,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"506:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"497:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_Account_$9_storage","typeString":"struct SimpleBankKG.Account storage ref"}},"id":38,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"checkingBalance","nodeType":"MemberAccess","referencedDeclaration":6,"src":"497:36:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":39,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19,"src":"537:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:46:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":41,"nodeType":"ExpressionStatement","src":"497:46:0"}]}}]},"functionSelector":"f4d4c9d7","id":54,"implemented":true,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"282:7:0","nodeType":"FunctionDefinition","parameters":{"id":20,"nodeType":"ParameterList","parameters":[{"constant":false,"id":17,"mutability":"mutable","name":"accountType","nameLocation":"302:11:0","nodeType":"VariableDeclaration","scope":54,"src":"290:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_AccountType_$4","typeString":"enum SimpleBankKG.AccountType"},"typeName":{"id":16,"nodeType":"UserDefinedTypeName","pathNode":{"id":15,"name":"AccountType","nodeType":"IdentifierPath","referencedDeclaration":4,"src":"290:11:0"},"referencedDeclaration":4,"src":"290:11:0","typeDescriptions":{"typeIdentifier":"t_enum$_AccountType_$4","typeString":"enum SimpleBankKG.AccountType"}},"visibility":"internal"},{"constant":false,"id":19,"mutability":"mutable","name":"amount","nameLocation":"323:6:0","nodeType":"VariableDeclaration","scope":54,"src":"315:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":18,"name":"uint256","nodeType":"ElementaryTypeName","src":"315:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"289:41:0"},"returnParameters":{"id":21,"nodeType":"ParameterList","parameters":[],"src":"346:0:0"},"scope":216,"src":"273:363:0","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":116,"nodeType":"Block","src":"708:452:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_AccountType_$4","typeString":"enum SimpleBankKG.AccountType"},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":62,"name":"accountType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":57,"src":"722:11:0","typeDescriptions":{"typeIdentifier":"t_enum$_AccountType_$4","typeString":"enum SimpleBankKG.AccountType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":63,"name":"AccountType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4,"src":"737:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_AccountType_$4_$","typeString":"type(enum SimpleBankKG.AccountType)"}},"id":64,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Checking","nodeType":"MemberAccess","referencedDeclaration":2,"src":"737:20:0","typeDescriptions":{"typeIdentifier":"t_enum$_AccountType_$4","typeString":"enum SimpleBankKG.AccountType"}},"src":"722:35:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":105,"nodeType":"Block","src":"938:170:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":93,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":87,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59,"src":"960:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"baseExpression":{"id":88,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"970:8:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Account_$9_storage_$","typeString":"mapping(address => struct SimpleBankKG.Account storage ref)"}},"id":91,"indexExpression":{"expression":{"id":89,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"979:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":90,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"979:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"970:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_Account_$9_storage","typeString":"struct SimpleBankKG.Account storage ref"}},"id":92,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"savingsBalance","nodeType":"MemberAccess","referencedDeclaration":8,"src":"970:35:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"960:45:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e7420736176696e67732062616c616e6365","id":94,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1007:30:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_0a97a90758af512682979b2d845cd6ecf5d797c3af626dbc1165cf216312280f","typeString":"literal_string \"Insufficient savings balance\""},"value":"Insufficient savings balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0a97a90758af512682979b2d845cd6ecf5d797c3af626dbc1165cf216312280f","typeString":"literal_string \"Insufficient savings balance\""}],"id":86,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"952:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":95,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"952:86:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":96,"nodeType":"ExpressionStatement","src":"952:86:0"},{"expression":{"id":103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":97,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"1052:8:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Account_$9_storage_$","typeString":"mapping(address => struct SimpleBankKG.Account storage ref)"}},"id":100,"indexExpression":{"expression":{"id":98,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1061:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":99,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1061:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1052:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_Account_$9_storage","typeString":"struct SimpleBankKG.Account storage ref"}},"id":101,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"savingsBalance","nodeType":"MemberAccess","referencedDeclaration":8,"src":"1052:35:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":102,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59,"src":"1091:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1052:45:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":104,"nodeType":"ExpressionStatement","src":"1052:45:0"}]},"id":106,"nodeType":"IfStatement","src":"718:390:0","trueBody":{"id":85,"nodeType":"Block","src":"759:173:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":73,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":67,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59,"src":"781:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"baseExpression":{"id":68,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"791:8:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Account_$9_storage_$","typeString":"mapping(address => struct SimpleBankKG.Account storage ref)"}},"id":71,"indexExpression":{"expression":{"id":69,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"800:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":70,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"800:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"791:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_Account_$9_storage","typeString":"struct SimpleBankKG.Account storage ref"}},"id":72,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"checkingBalance","nodeType":"MemberAccess","referencedDeclaration":6,"src":"791:36:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"781:46:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e7420636865636b696e672062616c616e6365","id":74,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"829:31:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_4aa2d6a9e4ee533959891f45c02235b6d02d176b39ed401b585706a2ce2f77c2","typeString":"literal_string \"Insufficient checking balance\""},"value":"Insufficient checking balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4aa2d6a9e4ee533959891f45c02235b6d02d176b39ed401b585706a2ce2f77c2","typeString":"literal_string \"Insufficient checking balance\""}],"id":66,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"773:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":75,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"773:88:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":76,"nodeType":"ExpressionStatement","src":"773:88:0"},{"expression":{"id":83,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":77,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"875:8:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Account_$9_storage_$","typeString":"mapping(address => struct SimpleBankKG.Account storage ref)"}},"id":80,"indexExpression":{"expression":{"id":78,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"884:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":79,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"884:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"875:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_Account_$9_storage","typeString":"struct SimpleBankKG.Account storage ref"}},"id":81,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"checkingBalance","nodeType":"MemberAccess","referencedDeclaration":6,"src":"875:36:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":82,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59,"src":"915:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"875:46:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":84,"nodeType":"ExpressionStatement","src":"875:46:0"}]}},{"expression":{"arguments":[{"id":113,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59,"src":"1146:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":109,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1125:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1125:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":108,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1117:8:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"1117:8:0","stateMutability":"payable","typeDescriptions":{}}},"id":111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1117:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","src":"1117:28:0","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1117:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":115,"nodeType":"ExpressionStatement","src":"1117:36:0"}]},"functionSelector":"3f489914","id":117,"implemented":true,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"651:8:0","nodeType":"FunctionDefinition","parameters":{"id":60,"nodeType":"ParameterList","parameters":[{"constant":false,"id":57,"mutability":"mutable","name":"accountType","nameLocation":"672:11:0","nodeType":"VariableDeclaration","scope":117,"src":"660:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_AccountType_$4","typeString":"enum SimpleBankKG.AccountType"},"typeName":{"id":56,"nodeType":"UserDefinedTypeName","pathNode":{"id":55,"name":"AccountType","nodeType":"IdentifierPath","referencedDeclaration":4,"src":"660:11:0"},"referencedDeclaration":4,"src":"660:11:0","typeDescriptions":{"typeIdentifier":"t_enum$_AccountType_$4","typeString":"enum SimpleBankKG.AccountType"}},"visibility":"internal"},{"constant":false,"id":59,"mutability":"mutable","name":"amount","nameLocation":"693:6:0","nodeType":"VariableDeclaration","scope":117,"src":"685:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":58,"name":"uint256","nodeType":"ElementaryTypeName","src":"685:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"659:41:0"},"returnParameters":{"id":61,"nodeType":"ParameterList","parameters":[],"src":"708:0:0"},"scope":216,"src":"642:518:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":186,"nodeType":"Block","src":"1248:513:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_AccountType_$4","typeString":"enum SimpleBankKG.AccountType"},"id":130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":127,"name":"fromAccountType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":120,"src":"1262:15:0","typeDescriptions":{"typeIdentifier":"t_enum$_AccountType_$4","typeString":"enum SimpleBankKG.AccountType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":128,"name":"AccountType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4,"src":"1281:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_AccountType_$4_$","typeString":"type(enum SimpleBankKG.AccountType)"}},"id":129,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Checking","nodeType":"MemberAccess","referencedDeclaration":2,"src":"1281:20:0","typeDescriptions":{"typeIdentifier":"t_enum$_AccountType_$4","typeString":"enum SimpleBankKG.AccountType"}},"src":"1262:39:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":184,"nodeType":"Block","src":"1534:221:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":159,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":124,"src":"1556:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"baseExpression":{"id":160,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"1566:8:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Account_$9_storage_$","typeString":"mapping(address => struct SimpleBankKG.Account storage ref)"}},"id":163,"indexExpression":{"expression":{"id":161,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1575:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1575:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1566:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_Account_$9_storage","typeString":"struct SimpleBankKG.Account storage ref"}},"id":164,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"savingsBalance","nodeType":"MemberAccess","referencedDeclaration":8,"src":"1566:35:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1556:45:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e7420736176696e67732062616c616e6365","id":166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1603:30:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_0a97a90758af512682979b2d845cd6ecf5d797c3af626dbc1165cf216312280f","typeString":"literal_string \"Insufficient savings balance\""},"value":"Insufficient savings balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0a97a90758af512682979b2d845cd6ecf5d797c3af626dbc1165cf216312280f","typeString":"literal_string \"Insufficient savings balance\""}],"id":158,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1548:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1548:86:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":168,"nodeType":"ExpressionStatement","src":"1548:86:0"},{"expression":{"id":175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":169,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"1648:8:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Account_$9_storage_$","typeString":"mapping(address => struct SimpleBankKG.Account storage ref)"}},"id":172,"indexExpression":{"expression":{"id":170,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1657:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1657:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1648:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_Account_$9_storage","typeString":"struct SimpleBankKG.Account storage ref"}},"id":173,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"savingsBalance","nodeType":"MemberAccess","referencedDeclaration":8,"src":"1648:35:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":174,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":124,"src":"1687:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1648:45:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":176,"nodeType":"ExpressionStatement","src":"1648:45:0"},{"expression":{"id":182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":177,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"1707:8:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Account_$9_storage_$","typeString":"mapping(address => struct SimpleBankKG.Account storage ref)"}},"id":179,"indexExpression":{"id":178,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":122,"src":"1716:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1707:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_Account_$9_storage","typeString":"struct SimpleBankKG.Account storage ref"}},"id":180,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"savingsBalance","nodeType":"MemberAccess","referencedDeclaration":8,"src":"1707:27:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":181,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":124,"src":"1738:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1707:37:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":183,"nodeType":"ExpressionStatement","src":"1707:37:0"}]},"id":185,"nodeType":"IfStatement","src":"1258:497:0","trueBody":{"id":157,"nodeType":"Block","src":"1303:225:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":132,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":124,"src":"1325:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"baseExpression":{"id":133,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"1335:8:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Account_$9_storage_$","typeString":"mapping(address => struct SimpleBankKG.Account storage ref)"}},"id":136,"indexExpression":{"expression":{"id":134,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1344:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1344:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1335:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_Account_$9_storage","typeString":"struct SimpleBankKG.Account storage ref"}},"id":137,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"checkingBalance","nodeType":"MemberAccess","referencedDeclaration":6,"src":"1335:36:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1325:46:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e7420636865636b696e672062616c616e6365","id":139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1373:31:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_4aa2d6a9e4ee533959891f45c02235b6d02d176b39ed401b585706a2ce2f77c2","typeString":"literal_string \"Insufficient checking balance\""},"value":"Insufficient checking balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4aa2d6a9e4ee533959891f45c02235b6d02d176b39ed401b585706a2ce2f77c2","typeString":"literal_string \"Insufficient checking balance\""}],"id":131,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1317:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1317:88:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":141,"nodeType":"ExpressionStatement","src":"1317:88:0"},{"expression":{"id":148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":142,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"1419:8:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Account_$9_storage_$","typeString":"mapping(address => struct SimpleBankKG.Account storage ref)"}},"id":145,"indexExpression":{"expression":{"id":143,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1428:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1428:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1419:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_Account_$9_storage","typeString":"struct SimpleBankKG.Account storage ref"}},"id":146,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"checkingBalance","nodeType":"MemberAccess","referencedDeclaration":6,"src":"1419:36:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":147,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":124,"src":"1459:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1419:46:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":149,"nodeType":"ExpressionStatement","src":"1419:46:0"},{"expression":{"id":155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":150,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"1479:8:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Account_$9_storage_$","typeString":"mapping(address => struct SimpleBankKG.Account storage ref)"}},"id":152,"indexExpression":{"id":151,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":122,"src":"1488:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1479:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_Account_$9_storage","typeString":"struct SimpleBankKG.Account storage ref"}},"id":153,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"checkingBalance","nodeType":"MemberAccess","referencedDeclaration":6,"src":"1479:28:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":154,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":124,"src":"1511:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1479:38:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":156,"nodeType":"ExpressionStatement","src":"1479:38:0"}]}}]},"functionSelector":"b0017321","id":187,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1175:8:0","nodeType":"FunctionDefinition","parameters":{"id":125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":120,"mutability":"mutable","name":"fromAccountType","nameLocation":"1196:15:0","nodeType":"VariableDeclaration","scope":187,"src":"1184:27:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_AccountType_$4","typeString":"enum SimpleBankKG.AccountType"},"typeName":{"id":119,"nodeType":"UserDefinedTypeName","pathNode":{"id":118,"name":"AccountType","nodeType":"IdentifierPath","referencedDeclaration":4,"src":"1184:11:0"},"referencedDeclaration":4,"src":"1184:11:0","typeDescriptions":{"typeIdentifier":"t_enum$_AccountType_$4","typeString":"enum SimpleBankKG.AccountType"}},"visibility":"internal"},{"constant":false,"id":122,"mutability":"mutable","name":"to","nameLocation":"1221:2:0","nodeType":"VariableDeclaration","scope":187,"src":"1213:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":121,"name":"address","nodeType":"ElementaryTypeName","src":"1213:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":124,"mutability":"mutable","name":"amount","nameLocation":"1233:6:0","nodeType":"VariableDeclaration","scope":187,"src":"1225:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":123,"name":"uint256","nodeType":"ElementaryTypeName","src":"1225:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1183:57:0"},"returnParameters":{"id":126,"nodeType":"ParameterList","parameters":[],"src":"1248:0:0"},"scope":216,"src":"1166:595:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":214,"nodeType":"Block","src":"1842:198:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_AccountType_$4","typeString":"enum SimpleBankKG.AccountType"},"id":198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":195,"name":"accountType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":190,"src":"1856:11:0","typeDescriptions":{"typeIdentifier":"t_enum$_AccountType_$4","typeString":"enum SimpleBankKG.AccountType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":196,"name":"AccountType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4,"src":"1871:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_AccountType_$4_$","typeString":"type(enum SimpleBankKG.AccountType)"}},"id":197,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Checking","nodeType":"MemberAccess","referencedDeclaration":2,"src":"1871:20:0","typeDescriptions":{"typeIdentifier":"t_enum$_AccountType_$4","typeString":"enum SimpleBankKG.AccountType"}},"src":"1856:35:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":212,"nodeType":"Block","src":"1967:67:0","statements":[{"expression":{"expression":{"baseExpression":{"id":206,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"1988:8:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Account_$9_storage_$","typeString":"mapping(address => struct SimpleBankKG.Account storage ref)"}},"id":209,"indexExpression":{"expression":{"id":207,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1997:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1997:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1988:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_Account_$9_storage","typeString":"struct SimpleBankKG.Account storage ref"}},"id":210,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"savingsBalance","nodeType":"MemberAccess","referencedDeclaration":8,"src":"1988:35:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":194,"id":211,"nodeType":"Return","src":"1981:42:0"}]},"id":213,"nodeType":"IfStatement","src":"1852:182:0","trueBody":{"id":205,"nodeType":"Block","src":"1893:68:0","statements":[{"expression":{"expression":{"baseExpression":{"id":199,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"1914:8:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Account_$9_storage_$","typeString":"mapping(address => struct SimpleBankKG.Account storage ref)"}},"id":202,"indexExpression":{"expression":{"id":200,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1923:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1923:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1914:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_Account_$9_storage","typeString":"struct SimpleBankKG.Account storage ref"}},"id":203,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"checkingBalance","nodeType":"MemberAccess","referencedDeclaration":6,"src":"1914:36:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":194,"id":204,"nodeType":"Return","src":"1907:43:0"}]}}]},"functionSelector":"e3a12480","id":215,"implemented":true,"kind":"function","modifiers":[],"name":"getBalance","nameLocation":"1776:10:0","nodeType":"FunctionDefinition","parameters":{"id":191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":190,"mutability":"mutable","name":"accountType","nameLocation":"1799:11:0","nodeType":"VariableDeclaration","scope":215,"src":"1787:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_AccountType_$4","typeString":"enum SimpleBankKG.AccountType"},"typeName":{"id":189,"nodeType":"UserDefinedTypeName","pathNode":{"id":188,"name":"AccountType","nodeType":"IdentifierPath","referencedDeclaration":4,"src":"1787:11:0"},"referencedDeclaration":4,"src":"1787:11:0","typeDescriptions":{"typeIdentifier":"t_enum$_AccountType_$4","typeString":"enum SimpleBankKG.AccountType"}},"visibility":"internal"}],"src":"1786:25:0"},"returnParameters":{"id":194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":193,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":215,"src":"1833:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":192,"name":"uint256","nodeType":"ElementaryTypeName","src":"1833:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1832:9:0"},"scope":216,"src":"1767:273:0","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":217,"src":"57:1985:0","usedErrors":[]}],"src":"32:2010:0"}}},"contracts":{"contracts/SimpleBankKG.sol":{"SimpleBankKG":{"abi":[{"inputs":[{"internalType":"enum SimpleBankKG.AccountType","name":"accountType","type":"uint8"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"deposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"enum SimpleBankKG.AccountType","name":"accountType","type":"uint8"}],"name":"getBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum SimpleBankKG.AccountType","name":"fromAccountType","type":"uint8"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum SimpleBankKG.AccountType","name":"accountType","type":"uint8"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"metadata":{"optimizer_settings":"M3B3","solc_metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"enum SimpleBankKG.AccountType\",\"name\":\"accountType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum SimpleBankKG.AccountType\",\"name\":\"accountType\",\"type\":\"uint8\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum SimpleBankKG.AccountType\",\"name\":\"fromAccountType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum SimpleBankKG.AccountType\",\"name\":\"accountType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleBankKG.sol\":\"SimpleBankKG\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/SimpleBankKG.sol\":{\"keccak256\":\"0xb8020189abc4f1e5ce251391b543b103dfc2800df2c8cc9f11c9e51a75f078cc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f85372c46c8460b41e0eab59a6b445aa70040c1cfd784e0d2c7c0f0728c55957\",\"dweb:/ipfs/QmbaYF4L8fgdSVpkEMcAC85EDDQZAJpZauqvi7ipx855zH\"]}},\"version\":1}","zk_version":"1.3.10"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"SimpleBankKG.sol:SimpleBankKG\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tptr.add\tr1, r0, stack[@ptr_calldata]\n\tshr.s\t96, r1, r1\n\tand\t@CPI0_0[0], r1, stack[@calldatasize]\n\tadd\t0, r0, stack[@returndatasize]\n\tadd\t128, r0, r1\n\tst.1\t64, r1\n\tand!\t1, r2, r1\n\tjump.ne\t@.BB0_1\n\tadd\tstack[@calldatasize], r0, r1\n\tsub.s!\t4, r1, r2\n\tjump.lt\t@.BB0_2\n\tptr.add\tstack[@ptr_calldata], r0, r2\n\tld\tr2, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_2[0], r2, r3\n\tjump.gt\t@.BB0_8\n\tsub.s!\t@CPI0_5[0], r2, r1\n\tjump.eq\t@.BB0_10\n\tsub.s!\t@CPI0_6[0], r2, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\tstack[@calldatasize], r0, r1\n\tnear_call\tr0, @abi_decode_enum_AccountTypet_addresst_uint256, @DEFAULT_UNWIND\n\tnear_call\tr0, @fun_transfer, @DEFAULT_UNWIND\n\tadd\t@CPI0_0[0], r0, r1\n\tld.1\t64, r2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_8:\n\tsub.s!\t@CPI0_3[0], r2, r3\n\tjump.eq\t@.BB0_14\n\tsub.s!\t@CPI0_4[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tnear_call\tr0, @abi_decode_enum_AccountTypet_uint256, @DEFAULT_UNWIND\n\tnear_call\tr0, @fun_deposit, @DEFAULT_UNWIND\n\tadd\t@CPI0_0[0], r0, r1\n\tld.1\t64, r2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_10:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\tstack[@calldatasize], r0, r1\n\tnear_call\tr0, @abi_decode_enum_AccountTypet_uint256, @DEFAULT_UNWIND\n\tnear_call\tr0, @fun_withdraw, @DEFAULT_UNWIND\n\tadd\t@CPI0_0[0], r0, r1\n\tld.1\t64, r2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_14:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\tstack[@calldatasize], r0, r1\n\tnear_call\tr0, @abi_decode_enum_AccountType, @DEFAULT_UNWIND\n\tnear_call\tr0, @fun_getBalance, @DEFAULT_UNWIND\n\tld.1\t64, r2\n\tst.1\tr2, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_7[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end0:\n\nabi_decode_enum_AccountTypet_uint256:\n.func_begin1:\n\tsub.s\t4, r1, r1\n\tadd\t@CPI1_0[0], r0, r2\n\tsub.s!\t63, r1, r3\n\tadd\t0, r0, r3\n\tadd.gt\tr2, r0, r3\n\tand\t@CPI1_0[0], r1, r1\n\tsub.s!\t0, r1, r4\n\tadd.ge\t0, r0, r2\n\tsub.s!\t@CPI1_0[0], r1, r1\n\tadd\tr3, r0, r1\n\tadd.eq\tr2, r0, r1\n\tsub.s!\t0, r1, r1\n\tjump.eq\t@.BB1_1\n\tptr.add\tstack[@ptr_calldata], r0, r2\n\tptr.add.s\t4, r2, r1\n\tld\tr1, r1\n\tsub.s!\t1, r1, r3\n\tjump.gt\t@.BB1_1\n\tptr.add.s\t36, r2, r2\n\tld\tr2, r2\n\tret\n.BB1_1:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end1:\n\nabi_decode_enum_AccountTypet_addresst_uint256:\n.func_begin2:\n\tsub.s\t4, r1, r1\n\tadd\t@CPI2_0[0], r0, r2\n\tsub.s!\t95, r1, r3\n\tadd\t0, r0, r3\n\tadd.gt\tr2, r0, r3\n\tand\t@CPI2_0[0], r1, r1\n\tsub.s!\t0, r1, r4\n\tadd.ge\t0, r0, r2\n\tsub.s!\t@CPI2_0[0], r1, r1\n\tadd\tr3, r0, r1\n\tadd.eq\tr2, r0, r1\n\tsub.s!\t0, r1, r1\n\tjump.eq\t@.BB2_1\n\tptr.add\tstack[@ptr_calldata], r0, r3\n\tptr.add.s\t4, r3, r1\n\tld\tr1, r1\n\tsub.s!\t1, r1, r2\n\tjump.gt\t@.BB2_1\n\tptr.add.s\t36, r3, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI2_1[0], r2, r4\n\tjump.gt\t@.BB2_1\n\tptr.add.s\t68, r3, r3\n\tld\tr3, r3\n\tret\n.BB2_1:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end2:\n\nabi_decode_enum_AccountType:\n.func_begin3:\n\tsub.s\t4, r1, r1\n\tadd\t@CPI3_0[0], r0, r2\n\tsub.s!\t31, r1, r3\n\tadd\t0, r0, r3\n\tadd.gt\tr2, r0, r3\n\tand\t@CPI3_0[0], r1, r1\n\tsub.s!\t0, r1, r4\n\tadd.ge\t0, r0, r2\n\tsub.s!\t@CPI3_0[0], r1, r1\n\tadd\tr3, r0, r1\n\tadd.eq\tr2, r0, r1\n\tsub.s!\t0, r1, r1\n\tjump.eq\t@.BB3_1\n\tadd\t4, r0, r1\n\tptr.add\tstack[@ptr_calldata], r1, r1\n\tld\tr1, r1\n\tsub.s!\t1, r1, r2\n\tjump.gt\t@.BB3_1\n\tret\n.BB3_1:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end3:\n\nfun_deposit:\n.func_begin4:\n\tnop\tstack+=[2]\n\tcontext.get_context_u128\tr3\n\tsub!\tr3, r2, r3\n\tjump.ne\t@.BB4_1\n\tadd\tr2, r0, stack-[2]\n\tadd\tr1, r0, stack-[1]\n\tsub.s!\t2, r1, r1\n\tjump.ge\t@.BB4_3\n\tcontext.caller\tr1\n\tand\t@CPI4_5[0], r1, r1\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\t@CPI4_3[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI4_3[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI4_6[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r3\n\tsub.s!\t0, r3, r3\n\tjump.eq\t@.BB4_10\n\tand!\t1, r2, r2\n\tadd\tstack-[2], r0, r4\n\tjump.eq\t@.BB4_7\n\tsub.s\t1, r0, r2\n\txor\tr4, r2, r3\n\tld\tr1, r1\n\tadd\t1, r1, r1\n\tsload\tr1, r2\n\tsub!\tr2, r3, r3\n\tjump.gt\t@.BB4_9\n.BB4_5:\n\tadd\tr2, r4, r2\n\tsstore\tr1, r2\n\tret\n.BB4_10:\n\tand!\t1, r2, r2\n\tadd\tstack-[2], r0, r4\n\tjump.eq\t@.BB4_7\n\tsub.s\t1, r0, r2\n\txor\tr4, r2, r3\n\tld\tr1, r1\n\tsload\tr1, r2\n\tsub!\tr2, r3, r3\n\tjump.le\t@.BB4_5\n.BB4_9:\n\tadd\t@CPI4_7[0], r0, r1\n\tst.1\t0, r1\n\tadd\t17, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI4_8[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB4_1:\n\tld.1\t64, r1\n\tadd\t100, r1, r2\n\tadd\t@CPI4_0[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t68, r1, r2\n\tadd\t@CPI4_1[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t43, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI4_2[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\t32, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI4_3[0], r0, r2\n\tsub.s!\t@CPI4_3[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI4_4[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB4_3:\n\tadd\t@CPI4_7[0], r0, r1\n\tst.1\t0, r1\n\tadd\t33, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI4_8[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB4_7:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end4:\n\nfun_withdraw:\n.func_begin5:\n\tnop\tstack+=[4]\n\tadd\tr2, r0, stack-[4]\n\tadd\tr1, r0, stack-[3]\n\tsub.s!\t2, r1, r1\n\tjump.ge\t@.BB5_1\n\tcontext.caller\tr1\n\tadd\tr1, r0, stack-[1]\n\tand\t@CPI5_0[0], r1, r1\n\tadd\tr1, r0, stack-[2]\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\t@CPI5_1[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI5_1[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI5_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[3], r0, r3\n\tsub.s!\t0, r3, r3\n\tjump.eq\t@.BB5_11\n\tand!\t1, r2, r2\n\tadd\tstack-[4], r0, r2\n\tjump.eq\t@.BB5_5\n\tld\tr1, r1\n\tadd\t1, r1, r1\n\tsload\tr1, r1\n\tsub!\tr1, r2, r1\n\tjump.lt\t@.BB5_7\n\tadd\tstack-[2], r0, r1\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\t@CPI5_1[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI5_1[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI5_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tadd\tstack-[4], r0, r3\n\tjump.eq\t@.BB5_5\n\tld\tr1, r1\n\tadd\t1, r1, r1\n\tsload\tr1, r2\n\tsub!\tr2, r3, r4\n\tjump.lt\t@.BB5_10\n.BB5_3:\n\tsub\tr2, r3, r2\n\tsstore\tr1, r2\n\tadd\tstack-[1], r0, r4\n\tsub.s!\t4, r4, r1\n\tjump.eq\t@.BB5_25\n\tadd\t@CPI5_6[0], r0, r1\n\tsub.s!\t0, r3, r2\n\tadd.ne\t0, r0, r1\n\tjump.eq\t@.BB5_18\n\tor\t@CPI5_7[0], r1, r1\n\tadd\t32777, r0, r2\n\tadd\tr0, r0, r5\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tjump\t@.BB5_17\n.BB5_11:\n\tand!\t1, r2, r2\n\tadd\tstack-[4], r0, r2\n\tjump.eq\t@.BB5_5\n\tld\tr1, r1\n\tsload\tr1, r1\n\tsub!\tr1, r2, r1\n\tjump.lt\t@.BB5_13\n\tadd\tstack-[2], r0, r1\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\t@CPI5_1[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI5_1[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI5_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tadd\tstack-[4], r0, r3\n\tjump.eq\t@.BB5_5\n\tld\tr1, r1\n\tsload\tr1, r2\n\tsub!\tr2, r3, r4\n\tjump.ge\t@.BB5_3\n.BB5_10:\n\tadd\t@CPI5_8[0], r0, r1\n\tst.1\t0, r1\n\tadd\t17, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI5_9[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB5_18:\n\tadd\tr4, r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n.BB5_17:\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI5_1[0], r3, stack[@returndatasize]\n\tand\t@CPI5_1[0], r3, r4\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB5_20\n.BB5_25:\n\tret\n.BB5_5:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB5_1:\n\tadd\t@CPI5_8[0], r0, r1\n\tst.1\t0, r1\n\tadd\t33, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI5_9[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB5_7:\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI5_3[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t28, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI5_4[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\t32, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI5_1[0], r0, r2\n\tsub.s!\t@CPI5_1[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI5_5[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB5_20:\n\tld.1\t64, r2\n\tand\t31, r4, r3\n\tshr.s!\t5, r4, r4\n\tjump.eq\t@.BB5_26\n\tadd\tr0, r0, r5\n.BB5_22:\n\tshl.s\t5, r5, r6\n\tadd\tr2, r6, r7\n\tptr.add\tr1, r6, r6\n\tld\tr6, r6\n\tst.1\tr7, r6\n\tadd\t1, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB5_22\n.BB5_26:\n\tsub.s!\t0, r3, r5\n\tjump.eq\t@.BB5_24\n\tshl.s\t5, r4, r4\n\tptr.add\tr1, r4, r1\n\tadd\tr2, r4, r4\n\tshl.s\t3, r3, r3\n\tld.1\tr4, r5\n\tshl\tr5, r3, r5\n\tshr\tr5, r3, r5\n\tld\tr1, r1\n\tsub\t256, r3, r3\n\tshr\tr1, r3, r1\n\tshl\tr1, r3, r1\n\tor\tr1, r5, r1\n\tst.1\tr4, r1\n.BB5_24:\n\tadd\t@CPI5_1[0], r0, r1\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t@CPI5_1[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tsub.s!\t@CPI5_1[0], r2, r4\n\tadd.lt\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t96, r3, r2\n\tor\tr2, r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB5_13:\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI5_10[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t29, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI5_4[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\t32, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI5_1[0], r0, r2\n\tsub.s!\t@CPI5_1[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI5_5[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end5:\n\nfun_transfer:\n.func_begin6:\n\tnop\tstack+=[4]\n\tadd\tr3, r0, stack-[4]\n\tadd\tr2, r0, stack-[1]\n\tadd\tr1, r0, stack-[3]\n\tsub.s!\t2, r1, r1\n\tjump.ge\t@.BB6_1\n\tcontext.caller\tr1\n\tand\t@CPI6_0[0], r1, r1\n\tadd\tr1, r0, stack-[2]\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\t@CPI6_1[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI6_1[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI6_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[3], r0, r3\n\tsub.s!\t0, r3, r3\n\tjump.eq\t@.BB6_13\n\tand!\t1, r2, r2\n\tadd\tstack-[4], r0, r2\n\tjump.eq\t@.BB6_5\n\tld\tr1, r1\n\tadd\t1, r1, r1\n\tsload\tr1, r1\n\tsub!\tr1, r2, r1\n\tjump.lt\t@.BB6_7\n\tadd\tstack-[2], r0, r1\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\t@CPI6_1[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI6_1[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI6_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tadd\tstack-[4], r0, r4\n\tjump.eq\t@.BB6_5\n\tld\tr1, r1\n\tadd\t1, r1, r1\n\tsload\tr1, r2\n\tsub!\tr2, r4, r3\n\tjump.lt\t@.BB6_10\n\tsub\tr2, r4, r2\n\tsstore\tr1, r2\n\tadd\tstack-[1], r0, r1\n\tand\t@CPI6_0[0], r1, r1\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\t@CPI6_1[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI6_1[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI6_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[4], r0, r4\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB6_5\n\tsub.s\t1, r0, r2\n\txor\tr4, r2, r3\n\tld\tr1, r1\n\tadd\t1, r1, r1\n\tsload\tr1, r2\n\tsub!\tr2, r3, r3\n\tjump.le\t@.BB6_3\n\tjump\t@.BB6_10\n.BB6_13:\n\tand!\t1, r2, r2\n\tadd\tstack-[4], r0, r2\n\tjump.eq\t@.BB6_5\n\tld\tr1, r1\n\tsload\tr1, r1\n\tsub!\tr1, r2, r1\n\tjump.lt\t@.BB6_15\n\tadd\tstack-[2], r0, r1\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\t@CPI6_1[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI6_1[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI6_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tadd\tstack-[4], r0, r4\n\tjump.eq\t@.BB6_5\n\tld\tr1, r1\n\tsload\tr1, r2\n\tsub!\tr2, r4, r3\n\tjump.lt\t@.BB6_10\n\tsub\tr2, r4, r2\n\tsstore\tr1, r2\n\tadd\tstack-[1], r0, r1\n\tand\t@CPI6_0[0], r1, r1\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\t@CPI6_1[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI6_1[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI6_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[4], r0, r4\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB6_5\n\tsub.s\t1, r0, r2\n\txor\tr4, r2, r3\n\tld\tr1, r1\n\tsload\tr1, r2\n\tsub!\tr2, r3, r3\n\tjump.gt\t@.BB6_10\n.BB6_3:\n\tadd\tr2, r4, r2\n\tsstore\tr1, r2\n\tret\n.BB6_5:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB6_10:\n\tadd\t@CPI6_6[0], r0, r1\n\tst.1\t0, r1\n\tadd\t17, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI6_7[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB6_1:\n\tadd\t@CPI6_6[0], r0, r1\n\tst.1\t0, r1\n\tadd\t33, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI6_7[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB6_7:\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI6_3[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t28, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI6_4[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\t32, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI6_1[0], r0, r2\n\tsub.s!\t@CPI6_1[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI6_5[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB6_15:\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI6_8[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t29, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI6_4[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\t32, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI6_1[0], r0, r2\n\tsub.s!\t@CPI6_1[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI6_5[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end6:\n\nfun_getBalance:\n.func_begin7:\n\tsub.s!\t1, r1, r2\n\tjump.gt\t@.BB7_2\n\tcontext.caller\tr2\n\tsub.s!\t0, r1, r1\n\tjump.eq\t@.BB7_7\n\tst.1\t0, r2\n\tst.1\t32, r0\n\tadd\t@CPI7_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI7_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI7_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB7_5\n\tld\tr1, r1\n\tadd\t1, r1, r1\n\tjump\t@.BB7_1\n.BB7_7:\n\tand\t@CPI7_2[0], r2, r1\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\t@CPI7_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI7_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI7_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB7_5\n\tld\tr1, r1\n.BB7_1:\n\tsload\tr1, r1\n\tret\n.BB7_2:\n\tadd\t@CPI7_3[0], r0, r1\n\tst.1\t0, r1\n\tadd\t33, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI7_4[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB7_5:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end7:\n\n__farcall:\n.func_begin8:\n.tmp0:\n\tfar_call\tr1, r2, @.BB8_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB8_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end8:\n\n__staticcall:\n.func_begin9:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB9_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB9_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end9:\n\n\t.data\n\t.p2align\t5\ncalldatasize:\n\t.cell 0\n\n\t.p2align\t5\nreturndatasize:\n\t.cell 0\n\n\t.p2align\t5\nptr_calldata:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI4_3:\nCPI5_1:\nCPI6_1:\nCPI7_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell 3818988671\nCPI0_3:\n\t.cell 3818988672\nCPI0_4:\n\t.cell 4107586007\nCPI0_5:\n\t.cell 1061722388\nCPI0_6:\n\t.cell 2952885025\nCPI0_7:\n\t.cell 2535301200456458802993406410752\nCPI1_0:\nCPI2_0:\nCPI3_0:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI2_1:\nCPI4_5:\nCPI5_0:\nCPI6_0:\nCPI7_2:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI4_0:\n\t.cell 49481314371980686176264477551638286458261873289884351694582230055399769243648\nCPI4_1:\n\t.cell 37721180308815760078558049434091947695079629424769862277874986139437596043125\nCPI4_2:\nCPI5_4:\nCPI6_4:\n\t.cell 3963877391197344453575983046348115674221700746820753546331534351508065746944\nCPI4_4:\n\t.cell 10458117451882892562347801444352\nCPI4_6:\nCPI5_2:\nCPI6_2:\nCPI7_1:\n\t.cell 904625697166532776746648320380374280103671760270919307471179981048634146816\nCPI4_7:\nCPI5_8:\nCPI6_6:\nCPI7_3:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI4_8:\nCPI5_9:\nCPI6_7:\nCPI7_4:\n\t.cell 2852213850513516153367582212096\nCPI5_3:\nCPI6_3:\n\t.cell 33213987989631693067883787898815194518022024193468623309124977067801089933312\nCPI5_5:\nCPI6_5:\n\t.cell 7922816251426433759354395033600\nCPI5_6:\n\t.cell 14437333991389365756822315673377632757035417522267279379660800\nCPI5_7:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\nCPI5_10:\nCPI6_8:\n\t.cell 33213987989631693067883787898814838310092058083489418331247715830341904105472\n","bytecode":{"object":"000300000000000200020000000103550000006001100270000000a30010019d000100000000001f0000008001000039000000400010043f0000000101200190000000210000c13d0000000001000031000000040210008c0000004f0000413d0000000202000367000000000202043b000000e002200270000000a50320009c000000290000213d000000a80120009c000000350000613d000000a90120009c0000004f0000c13d0000000001000416000000000110004c0000004f0000c13d0000000001000031028600680000040f028601a10000040f000000a301000041000000400200043d000000a30320009c00000000010240190000004001100210000002870001042e0000000001000416000000000110004c0000004f0000c13d000000200100003900000100001004430000012000000443000000a401000041000002870001042e000000a60320009c000000410000613d000000a70220009c0000004f0000c13d028600510000040f028600980000040f000000a301000041000000400200043d000000a30320009c00000000010240190000004001100210000002870001042e0000000001000416000000000110004c0000004f0000c13d0000000001000031028600510000040f028600e80000040f000000a301000041000000400200043d000000a30320009c00000000010240190000004001100210000002870001042e0000000001000416000000000110004c0000004f0000c13d0000000001000031028600830000040f028602500000040f000000400200043d0000000000120435000000a301000041000000a30320009c00000000010240190000004001100210000000aa011001c7000002870001042e00000000010000190000028800010430000000040110008a000000ab020000410000003f0310008c00000000030000190000000003022019000000ab01100197000000000410004c0000000002008019000000ab0110009c00000000010300190000000001026019000000000110004c000000660000613d00000002020003670000000401200370000000000101043b000000010310008c000000660000213d0000002402200370000000000202043b000000000001042d00000000010000190000028800010430000000040110008a000000ab020000410000005f0310008c00000000030000190000000003022019000000ab01100197000000000410004c0000000002008019000000ab0110009c00000000010300190000000001026019000000000110004c000000810000613d00000002030003670000000401300370000000000101043b000000010210008c000000810000213d0000002402300370000000000202043b000000ac0420009c000000810000213d0000004403300370000000000303043b000000000001042d00000000010000190000028800010430000000040110008a000000ab020000410000001f0310008c00000000030000190000000003022019000000ab01100197000000000410004c0000000002008019000000ab0110009c00000000010300190000000001026019000000000110004c000000960000613d00000004010000390000000201100367000000000101043b000000010210008c000000960000213d000000000001042d0000000001000019000002880001043000020000000000020000000003000416000000000323004b000000cb0000c13d000200000002001d000100000001001d000000020110008c000000e00000813d0000000001000411000000ac011001970000000000100435000000200000043f000000a3010000410000000002000414000000a30320009c0000000001024019000000c001100210000000b1011001c70000801002000039028602810000040f0000000103000029000000000330004c000000bc0000613d00000001022001900000000204000029000000e60000613d000000010200008a000000000324013f000000000101043b0000000101100039000000000201041a000000000332004b000000c50000213d0000000002420019000000000021041b000000000001042d00000001022001900000000204000029000000e60000613d000000010200008a000000000324013f000000000101043b000000000201041a000000000332004b000000b90000a13d000000b20100004100000000001004350000001101000039000000040010043f000000b3010000410000028800010430000000400100043d0000006402100039000000ad0300004100000000003204350000004402100039000000ae03000041000000000032043500000024021000390000002b030000390000000000320435000000af020000410000000000210435000000040210003900000020030000390000000000320435000000a302000041000000a30310009c00000000010280190000004001100210000000b0011001c70000028800010430000000b20100004100000000001004350000002101000039000000040010043f000000b3010000410000028800010430000000000100001900000288000104300004000000000002000400000002001d000300000001001d000000020110008c000001510000813d0000000001000411000100000001001d000000ac01100197000200000001001d0000000000100435000000200000043f000000a3010000410000000002000414000000a30320009c0000000001024019000000c001100210000000b1011001c70000801002000039028602810000040f0000000303000029000000000330004c000001270000613d000000010220019000000004020000290000014f0000613d000000000101043b0000000101100039000000000101041a000000000121004b000001570000413d00000002010000290000000000100435000000200000043f000000a3010000410000000002000414000000a30320009c0000000001024019000000c001100210000000b1011001c70000801002000039028602810000040f000000010220019000000004030000290000014f0000613d000000000101043b0000000101100039000000000201041a000000000432004b000001400000413d0000000002320049000000000021041b0000000104000029000000040140008c0000014e0000613d000000b601000041000000000230004c000000000100c019000001460000613d000000b7011001c7000080090200003900000000050000190286027c0000040f000001480000013d000000010220019000000004020000290000014f0000613d000000000101043b000000000101041a000000000121004b0000018f0000413d00000002010000290000000000100435000000200000043f000000a3010000410000000002000414000000a30320009c0000000001024019000000c001100210000000b1011001c70000801002000039028602810000040f000000010220019000000004030000290000014f0000613d000000000101043b000000000201041a000000000432004b000001190000813d000000b20100004100000000001004350000001101000039000000040010043f000000b301000041000002880001043000000000020400190286027c0000040f00000000030100190000006003300270000100a30030019d000000a3043001970000000102200190000001690000613d000000000001042d00000000010000190000028800010430000000b20100004100000000001004350000002101000039000000040010043f000000b3010000410000028800010430000000400100043d0000004402100039000000b403000041000000000032043500000024021000390000001c030000390000000000320435000000af020000410000000000210435000000040210003900000020030000390000000000320435000000a302000041000000a30310009c00000000010280190000004001100210000000b5011001c70000028800010430000000400200043d0000001f0340018f0000000504400272000001760000613d000000000500001900000005065002100000000007620019000000000661034f000000000606043b00000000006704350000000105500039000000000645004b0000016e0000413d000000000530004c000001850000613d0000000504400210000000000141034f00000000044200190000000303300210000000000504043300000000053501cf000000000535022f000000000101043b0000010003300089000000000131022f00000000013101cf000000000151019f0000000000140435000000a3010000410000000103000031000000a30430009c0000000003018019000000a30420009c000000000102401900000040011002100000006002300210000000000112019f0000028800010430000000400100043d0000004402100039000000b803000041000000000032043500000024021000390000001d030000390000000000320435000000af020000410000000000210435000000040210003900000020030000390000000000320435000000a302000041000000a30310009c00000000010280190000004001100210000000b5011001c700000288000104300004000000000002000400000003001d000100000002001d000300000001001d000000020110008c000002260000813d0000000001000411000000ac01100197000200000001001d0000000000100435000000200000043f000000a3010000410000000002000414000000a30320009c0000000001024019000000c001100210000000b1011001c70000801002000039028602810000040f0000000303000029000000000330004c000001eb0000613d000000010220019000000004020000290000021e0000613d000000000101043b0000000101100039000000000101041a000000000121004b0000022c0000413d00000002010000290000000000100435000000200000043f000000a3010000410000000002000414000000a30320009c0000000001024019000000c001100210000000b1011001c70000801002000039028602810000040f000000010220019000000004040000290000021e0000613d000000000101043b0000000101100039000000000201041a000000000342004b000002200000413d0000000002420049000000000021041b0000000101000029000000ac011001970000000000100435000000200000043f000000a3010000410000000002000414000000a30320009c0000000001024019000000c001100210000000b1011001c70000801002000039028602810000040f000000040400002900000001022001900000021e0000613d000000010200008a000000000324013f000000000101043b0000000101100039000000000201041a000000000332004b0000021b0000a13d000002200000013d000000010220019000000004020000290000021e0000613d000000000101043b000000000101041a000000000121004b0000023e0000413d00000002010000290000000000100435000000200000043f000000a3010000410000000002000414000000a30320009c0000000001024019000000c001100210000000b1011001c70000801002000039028602810000040f000000010220019000000004040000290000021e0000613d000000000101043b000000000201041a000000000342004b000002200000413d0000000002420049000000000021041b0000000101000029000000ac011001970000000000100435000000200000043f000000a3010000410000000002000414000000a30320009c0000000001024019000000c001100210000000b1011001c70000801002000039028602810000040f000000040400002900000001022001900000021e0000613d000000010200008a000000000324013f000000000101043b000000000201041a000000000332004b000002200000213d0000000002420019000000000021041b000000000001042d00000000010000190000028800010430000000b20100004100000000001004350000001101000039000000040010043f000000b3010000410000028800010430000000b20100004100000000001004350000002101000039000000040010043f000000b3010000410000028800010430000000400100043d0000004402100039000000b403000041000000000032043500000024021000390000001c030000390000000000320435000000af020000410000000000210435000000040210003900000020030000390000000000320435000000a302000041000000a30310009c00000000010280190000004001100210000000b5011001c70000028800010430000000400100043d0000004402100039000000b803000041000000000032043500000024021000390000001d030000390000000000320435000000af020000410000000000210435000000040210003900000020030000390000000000320435000000a302000041000000a30310009c00000000010280190000004001100210000000b5011001c70000028800010430000000010210008c000002740000213d0000000002000411000000000110004c000002640000613d0000000000200435000000200000043f000000a3010000410000000002000414000000a30320009c0000000001024019000000c001100210000000b1011001c70000801002000039028602810000040f00000001022001900000027a0000613d000000000101043b0000000101100039000002720000013d000000ac012001970000000000100435000000200000043f000000a3010000410000000002000414000000a30320009c0000000001024019000000c001100210000000b1011001c70000801002000039028602810000040f00000001022001900000027a0000613d000000000101043b000000000101041a000000000001042d000000b20100004100000000001004350000002101000039000000040010043f000000b3010000410000028800010430000000000100001900000288000104300000027f002104210000000102000039000000000001042d0000000002000019000000000001042d00000284002104230000000102000039000000000001042d0000000002000019000000000001042d0000028600000432000002870001042e000002880001043000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff000000020000000000000000000000000000004000000100000000000000000000000000000000000000000000000000000000000000000000000000e3a1247f00000000000000000000000000000000000000000000000000000000e3a1248000000000000000000000000000000000000000000000000000000000f4d4c9d7000000000000000000000000000000000000000000000000000000003f48991400000000000000000000000000000000000000000000000000000000b001732100000000000000000000000000000000000000200000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffff6d656e7420616d6f756e7400000000000000000000000000000000000000000053656e7420616d6f756e74206e6f74207468652073616d65206173206172677508c379a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008400000000000000000000000002000000000000000000000000000000000000400000000000000000000000004e487b71000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024000000000000000000000000496e73756666696369656e7420736176696e67732062616c616e636500000000000000000000000000000000000000000000006400000000000000000000000000000000000008fc0000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000496e73756666696369656e7420636865636b696e672062616c616e636500000000000000000000000000000000000000000000000000000000000000000000000dd9a2103977c647ebed628255c454df770d70635583ed464a63240ba9e70612"},"methodIdentifiers":{"deposit(uint8,uint256)":"f4d4c9d7","getBalance(uint8)":"e3a12480","transfer(uint8,address,uint256)":"b0017321","withdraw(uint8,uint256)":"3f489914"}},"irOptimized":"/*=====================================================*\n *                       WARNING                       *\n *  Solidity to Yul compilation is still EXPERIMENTAL  *\n *       It can result in LOSS OF FUNDS or worse       *\n *                !USE AT YOUR OWN RISK!               *\n *=====================================================*/\n\n/// @use-src 0:\"contracts/SimpleBankKG.sol\"\nobject \"SimpleBankKG_216\" {\n    code {\n        {\n            /// @src 0:57:2042  \"contract SimpleBankKG {...\"\n            mstore(64, 128)\n            if callvalue() { revert(0, 0) }\n            let _1 := datasize(\"SimpleBankKG_216_deployed\")\n            codecopy(128, dataoffset(\"SimpleBankKG_216_deployed\"), _1)\n            return(128, _1)\n        }\n    }\n    /// @use-src 0:\"contracts/SimpleBankKG.sol\"\n    object \"SimpleBankKG_216_deployed\" {\n        code {\n            {\n                /// @src 0:57:2042  \"contract SimpleBankKG {...\"\n                mstore(64, 128)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let _1 := 0\n                    switch shr(224, calldataload(_1))\n                    case 0x3f489914 {\n                        if callvalue() { revert(_1, _1) }\n                        let param, param_1 := abi_decode_enum_AccountTypet_uint256(calldatasize())\n                        fun_withdraw(param, param_1)\n                        return(mload(64), _1)\n                    }\n                    case 0xb0017321 {\n                        if callvalue() { revert(_1, _1) }\n                        let param_2, param_3, param_4 := abi_decode_enum_AccountTypet_addresst_uint256(calldatasize())\n                        fun_transfer(param_2, param_3, param_4)\n                        return(mload(64), _1)\n                    }\n                    case 0xe3a12480 {\n                        if callvalue() { revert(_1, _1) }\n                        let ret := fun_getBalance(abi_decode_enum_AccountType(calldatasize()))\n                        let memPos := mload(64)\n                        return(memPos, sub(abi_encode_uint256(memPos, ret), memPos))\n                    }\n                    case 0xf4d4c9d7 {\n                        let param_5, param_6 := abi_decode_enum_AccountTypet_uint256(calldatasize())\n                        fun_deposit(param_5, param_6)\n                        return(mload(64), _1)\n                    }\n                }\n                revert(0, 0)\n            }\n            function abi_decode_enum_AccountTypet_uint256(dataEnd) -> value0, value1\n            {\n                if slt(add(dataEnd, not(3)), 64) { revert(0, 0) }\n                let value := calldataload(4)\n                if iszero(lt(value, 2))\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:57:2042  \"contract SimpleBankKG {...\"\n                value0 := value\n                value1 := calldataload(36)\n            }\n            function abi_decode_enum_AccountTypet_addresst_uint256(dataEnd) -> value0, value1, value2\n            {\n                if slt(add(dataEnd, not(3)), 96) { revert(0, 0) }\n                let value := calldataload(4)\n                if iszero(lt(value, 2))\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:57:2042  \"contract SimpleBankKG {...\"\n                value0 := value\n                let value_1 := calldataload(36)\n                if iszero(eq(value_1, and(value_1, sub(shl(160, 1), 1))))\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:57:2042  \"contract SimpleBankKG {...\"\n                value1 := value_1\n                value2 := calldataload(68)\n            }\n            function abi_decode_enum_AccountType(dataEnd) -> value0\n            {\n                if slt(add(dataEnd, not(3)), 32) { revert(0, 0) }\n                let value := calldataload(4)\n                if iszero(lt(value, 2))\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:57:2042  \"contract SimpleBankKG {...\"\n                value0 := value\n            }\n            function abi_encode_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(headStart, value0)\n            }\n            function validator_assert_enum_AccountType(value)\n            {\n                if iszero(lt(value, 2))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x21)\n                    revert(0, 0x24)\n                }\n            }\n            function mapping_index_access_mapping_address_struct_Account_storage_of_address(key) -> dataSlot\n            {\n                mstore(/** @src 0:461:481  \"AccountType.Checking\" */ 0, /** @src 0:57:2042  \"contract SimpleBankKG {...\" */ and(key, sub(shl(160, 1), 1)))\n                mstore(0x20, /** @src 0:461:481  \"AccountType.Checking\" */ 0)\n                /// @src 0:57:2042  \"contract SimpleBankKG {...\"\n                dataSlot := keccak256(/** @src 0:461:481  \"AccountType.Checking\" */ 0, /** @src 0:57:2042  \"contract SimpleBankKG {...\" */ 0x40)\n            }\n            function panic_error_0x11()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x11)\n                revert(0, 0x24)\n            }\n            function checked_add_uint256(x, y) -> sum\n            {\n                if gt(x, not(y)) { panic_error_0x11() }\n                sum := add(x, y)\n            }\n            /// @ast-id 54 @src 0:273:636  \"function deposit(AccountType accountType, uint256 amount) public payable {...\"\n            function fun_deposit(var_accountType, var_amount)\n            {\n                /// @src 0:57:2042  \"contract SimpleBankKG {...\"\n                if iszero(/** @src 0:364:383  \"msg.value == amount\" */ eq(/** @src 0:364:373  \"msg.value\" */ callvalue(), /** @src 0:364:383  \"msg.value == amount\" */ var_amount))\n                /// @src 0:57:2042  \"contract SimpleBankKG {...\"\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 43)\n                    mstore(add(memPtr, 68), \"Sent amount not the same as argu\")\n                    mstore(add(memPtr, 100), \"ment amount\")\n                    revert(memPtr, 132)\n                }\n                validator_assert_enum_AccountType(var_accountType)\n                /// @src 0:442:630  \"if (accountType == AccountType.Checking) {...\"\n                switch /** @src 0:446:481  \"accountType == AccountType.Checking\" */ iszero(var_accountType)\n                case /** @src 0:442:630  \"if (accountType == AccountType.Checking) {...\" */ 0 {\n                    /// @src 0:574:609  \"accounts[msg.sender].savingsBalance\"\n                    let _1 := add(/** @src 0:574:594  \"accounts[msg.sender]\" */ mapping_index_access_mapping_address_struct_Account_storage_of_address(/** @src 0:583:593  \"msg.sender\" */ caller()), /** @src 0:574:609  \"accounts[msg.sender].savingsBalance\" */ 1)\n                    /// @src 0:57:2042  \"contract SimpleBankKG {...\"\n                    sstore(_1, /** @src 0:574:619  \"accounts[msg.sender].savingsBalance += amount\" */ checked_add_uint256(/** @src 0:57:2042  \"contract SimpleBankKG {...\" */ sload(/** @src 0:574:619  \"accounts[msg.sender].savingsBalance += amount\" */ _1), var_amount))\n                }\n                default /// @src 0:442:630  \"if (accountType == AccountType.Checking) {...\"\n                {\n                    /// @src 0:497:517  \"accounts[msg.sender]\"\n                    let _2 := mapping_index_access_mapping_address_struct_Account_storage_of_address(/** @src 0:506:516  \"msg.sender\" */ caller())\n                    /// @src 0:57:2042  \"contract SimpleBankKG {...\"\n                    sstore(_2, /** @src 0:497:543  \"accounts[msg.sender].checkingBalance += amount\" */ checked_add_uint256(/** @src 0:57:2042  \"contract SimpleBankKG {...\" */ sload(/** @src 0:497:543  \"accounts[msg.sender].checkingBalance += amount\" */ _2), var_amount))\n                }\n            }\n            /// @src 0:57:2042  \"contract SimpleBankKG {...\"\n            function require_helper_stringliteral_0a97(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 28)\n                    mstore(add(memPtr, 68), \"Insufficient savings balance\")\n                    revert(memPtr, 100)\n                }\n            }\n            function require_helper_stringliteral_4aa2(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 29)\n                    mstore(add(memPtr, 68), \"Insufficient checking balance\")\n                    revert(memPtr, 100)\n                }\n            }\n            function revert_forward()\n            {\n                let pos := mload(64)\n                returndatacopy(pos, 0, returndatasize())\n                revert(pos, returndatasize())\n            }\n            /// @ast-id 117 @src 0:642:1160  \"function withdraw(AccountType accountType, uint256 amount) public {...\"\n            function fun_withdraw(var_accountType, var_amount)\n            {\n                /// @src 0:57:2042  \"contract SimpleBankKG {...\"\n                validator_assert_enum_AccountType(var_accountType)\n                /// @src 0:718:1108  \"if (accountType == AccountType.Checking) {...\"\n                switch /** @src 0:722:757  \"accountType == AccountType.Checking\" */ iszero(var_accountType)\n                case /** @src 0:718:1108  \"if (accountType == AccountType.Checking) {...\" */ 0 {\n                    /// @src 0:952:1038  \"require(amount <= accounts[msg.sender].savingsBalance, \\\"Insufficient savings balance\\\")\"\n                    require_helper_stringliteral_0a97(/** @src 0:960:1005  \"amount <= accounts[msg.sender].savingsBalance\" */ iszero(gt(var_amount, /** @src 0:57:2042  \"contract SimpleBankKG {...\" */ sload(/** @src 0:970:1005  \"accounts[msg.sender].savingsBalance\" */ add(/** @src 0:970:990  \"accounts[msg.sender]\" */ mapping_index_access_mapping_address_struct_Account_storage_of_address(/** @src 0:979:989  \"msg.sender\" */ caller()), /** @src 0:970:1005  \"accounts[msg.sender].savingsBalance\" */ 1)))))\n                    /// @src 0:1052:1087  \"accounts[msg.sender].savingsBalance\"\n                    let _1 := add(/** @src 0:1052:1072  \"accounts[msg.sender]\" */ mapping_index_access_mapping_address_struct_Account_storage_of_address(/** @src 0:979:989  \"msg.sender\" */ caller()), /** @src 0:970:1005  \"accounts[msg.sender].savingsBalance\" */ 1)\n                    /// @src 0:57:2042  \"contract SimpleBankKG {...\"\n                    let _2 := sload(/** @src 0:1052:1097  \"accounts[msg.sender].savingsBalance -= amount\" */ _1)\n                    /// @src 0:57:2042  \"contract SimpleBankKG {...\"\n                    if lt(_2, var_amount) { panic_error_0x11() }\n                    sstore(_1, sub(_2, var_amount))\n                }\n                default /// @src 0:718:1108  \"if (accountType == AccountType.Checking) {...\"\n                {\n                    /// @src 0:773:861  \"require(amount <= accounts[msg.sender].checkingBalance, \\\"Insufficient checking balance\\\")\"\n                    require_helper_stringliteral_4aa2(/** @src 0:781:827  \"amount <= accounts[msg.sender].checkingBalance\" */ iszero(gt(var_amount, /** @src 0:57:2042  \"contract SimpleBankKG {...\" */ sload(/** @src 0:791:811  \"accounts[msg.sender]\" */ mapping_index_access_mapping_address_struct_Account_storage_of_address(/** @src 0:800:810  \"msg.sender\" */ caller())))))\n                    /// @src 0:875:895  \"accounts[msg.sender]\"\n                    let _3 := mapping_index_access_mapping_address_struct_Account_storage_of_address(/** @src 0:800:810  \"msg.sender\" */ caller())\n                    /// @src 0:57:2042  \"contract SimpleBankKG {...\"\n                    let _4 := sload(/** @src 0:875:921  \"accounts[msg.sender].checkingBalance -= amount\" */ _3)\n                    /// @src 0:57:2042  \"contract SimpleBankKG {...\"\n                    if lt(_4, var_amount) { panic_error_0x11() }\n                    sstore(_3, sub(_4, var_amount))\n                }\n                /// @src 0:1117:1153  \"payable(msg.sender).transfer(amount)\"\n                let _5 := /** @src 0:737:757  \"AccountType.Checking\" */ 0\n                /// @src 0:1117:1153  \"payable(msg.sender).transfer(amount)\"\n                if iszero(var_amount) { _5 := 2300 }\n                if iszero(call(_5, /** @src 0:1125:1135  \"msg.sender\" */ caller(), /** @src 0:1117:1153  \"payable(msg.sender).transfer(amount)\" */ var_amount, /** @src 0:737:757  \"AccountType.Checking\" */ 0, 0, 0, 0))\n                /// @src 0:1117:1153  \"payable(msg.sender).transfer(amount)\"\n                { revert_forward() }\n            }\n            /// @ast-id 187 @src 0:1166:1761  \"function transfer(AccountType fromAccountType, address to, uint256 amount) public {...\"\n            function fun_transfer(var_fromAccountType, var_to, var_amount)\n            {\n                /// @src 0:57:2042  \"contract SimpleBankKG {...\"\n                validator_assert_enum_AccountType(var_fromAccountType)\n                /// @src 0:1258:1755  \"if (fromAccountType == AccountType.Checking) {...\"\n                switch /** @src 0:1262:1301  \"fromAccountType == AccountType.Checking\" */ iszero(var_fromAccountType)\n                case /** @src 0:1258:1755  \"if (fromAccountType == AccountType.Checking) {...\" */ 0 {\n                    /// @src 0:1548:1634  \"require(amount <= accounts[msg.sender].savingsBalance, \\\"Insufficient savings balance\\\")\"\n                    require_helper_stringliteral_0a97(/** @src 0:1556:1601  \"amount <= accounts[msg.sender].savingsBalance\" */ iszero(gt(var_amount, /** @src 0:57:2042  \"contract SimpleBankKG {...\" */ sload(/** @src 0:1566:1601  \"accounts[msg.sender].savingsBalance\" */ add(/** @src 0:1566:1586  \"accounts[msg.sender]\" */ mapping_index_access_mapping_address_struct_Account_storage_of_address(/** @src 0:1575:1585  \"msg.sender\" */ caller()), /** @src 0:57:2042  \"contract SimpleBankKG {...\" */ 1)))))\n                    /// @src 0:1648:1683  \"accounts[msg.sender].savingsBalance\"\n                    let _1 := add(/** @src 0:1648:1668  \"accounts[msg.sender]\" */ mapping_index_access_mapping_address_struct_Account_storage_of_address(/** @src 0:1575:1585  \"msg.sender\" */ caller()), /** @src 0:57:2042  \"contract SimpleBankKG {...\" */ 1)\n                    let _2 := sload(/** @src 0:1648:1693  \"accounts[msg.sender].savingsBalance -= amount\" */ _1)\n                    /// @src 0:57:2042  \"contract SimpleBankKG {...\"\n                    if lt(_2, var_amount) { panic_error_0x11() }\n                    sstore(_1, sub(_2, var_amount))\n                    /// @src 0:1707:1734  \"accounts[to].savingsBalance\"\n                    let _3 := add(/** @src 0:1707:1719  \"accounts[to]\" */ mapping_index_access_mapping_address_struct_Account_storage_of_address(var_to), /** @src 0:57:2042  \"contract SimpleBankKG {...\" */ 1)\n                    sstore(_3, /** @src 0:1707:1744  \"accounts[to].savingsBalance += amount\" */ checked_add_uint256(/** @src 0:57:2042  \"contract SimpleBankKG {...\" */ sload(/** @src 0:1707:1744  \"accounts[to].savingsBalance += amount\" */ _3), var_amount))\n                }\n                default /// @src 0:1258:1755  \"if (fromAccountType == AccountType.Checking) {...\"\n                {\n                    /// @src 0:1317:1405  \"require(amount <= accounts[msg.sender].checkingBalance, \\\"Insufficient checking balance\\\")\"\n                    require_helper_stringliteral_4aa2(/** @src 0:1325:1371  \"amount <= accounts[msg.sender].checkingBalance\" */ iszero(gt(var_amount, /** @src 0:57:2042  \"contract SimpleBankKG {...\" */ sload(/** @src 0:1335:1355  \"accounts[msg.sender]\" */ mapping_index_access_mapping_address_struct_Account_storage_of_address(/** @src 0:1344:1354  \"msg.sender\" */ caller())))))\n                    /// @src 0:1419:1439  \"accounts[msg.sender]\"\n                    let _4 := mapping_index_access_mapping_address_struct_Account_storage_of_address(/** @src 0:1344:1354  \"msg.sender\" */ caller())\n                    /// @src 0:57:2042  \"contract SimpleBankKG {...\"\n                    let _5 := sload(/** @src 0:1419:1465  \"accounts[msg.sender].checkingBalance -= amount\" */ _4)\n                    /// @src 0:57:2042  \"contract SimpleBankKG {...\"\n                    if lt(_5, var_amount) { panic_error_0x11() }\n                    sstore(_4, sub(_5, var_amount))\n                    /// @src 0:1479:1491  \"accounts[to]\"\n                    let _6 := mapping_index_access_mapping_address_struct_Account_storage_of_address(var_to)\n                    /// @src 0:57:2042  \"contract SimpleBankKG {...\"\n                    sstore(_6, /** @src 0:1479:1517  \"accounts[to].checkingBalance += amount\" */ checked_add_uint256(/** @src 0:57:2042  \"contract SimpleBankKG {...\" */ sload(/** @src 0:1479:1517  \"accounts[to].checkingBalance += amount\" */ _6), var_amount))\n                }\n            }\n            /// @ast-id 215 @src 0:1767:2040  \"function getBalance(AccountType accountType) public view returns (uint256) {...\"\n            function fun_getBalance(var_accountType) -> var\n            {\n                /// @src 0:57:2042  \"contract SimpleBankKG {...\"\n                if iszero(lt(var_accountType, 2))\n                {\n                    mstore(/** @src 0:1871:1891  \"AccountType.Checking\" */ 0, /** @src 0:57:2042  \"contract SimpleBankKG {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x21)\n                    revert(/** @src 0:1871:1891  \"AccountType.Checking\" */ 0, /** @src 0:57:2042  \"contract SimpleBankKG {...\" */ 0x24)\n                }\n                /// @src 0:1852:2034  \"if (accountType == AccountType.Checking) {...\"\n                switch /** @src 0:1856:1891  \"accountType == AccountType.Checking\" */ iszero(var_accountType)\n                case /** @src 0:1852:2034  \"if (accountType == AccountType.Checking) {...\" */ 0 {\n                    /// @src 0:57:2042  \"contract SimpleBankKG {...\"\n                    mstore(/** @src 0:1871:1891  \"AccountType.Checking\" */ 0, /** @src 0:1997:2007  \"msg.sender\" */ caller())\n                    /// @src 0:57:2042  \"contract SimpleBankKG {...\"\n                    mstore(0x20, /** @src 0:1871:1891  \"AccountType.Checking\" */ 0)\n                    /// @src 0:1981:2023  \"return accounts[msg.sender].savingsBalance\"\n                    var := /** @src 0:57:2042  \"contract SimpleBankKG {...\" */ sload(/** @src 0:1988:2023  \"accounts[msg.sender].savingsBalance\" */ add(/** @src 0:57:2042  \"contract SimpleBankKG {...\" */ keccak256(/** @src 0:1871:1891  \"AccountType.Checking\" */ 0, /** @src 0:57:2042  \"contract SimpleBankKG {...\" */ 0x40), 1))\n                    /// @src 0:1981:2023  \"return accounts[msg.sender].savingsBalance\"\n                    leave\n                }\n                default /// @src 0:1852:2034  \"if (accountType == AccountType.Checking) {...\"\n                {\n                    /// @src 0:1907:1950  \"return accounts[msg.sender].checkingBalance\"\n                    var := /** @src 0:57:2042  \"contract SimpleBankKG {...\" */ sload(/** @src 0:1914:1934  \"accounts[msg.sender]\" */ mapping_index_access_mapping_address_struct_Account_storage_of_address(/** @src 0:1923:1933  \"msg.sender\" */ caller()))\n                    /// @src 0:1907:1950  \"return accounts[msg.sender].checkingBalance\"\n                    leave\n                }\n            }\n        }\n        data \".metadata\" hex\"a36469706673582212206ec1680e0c897ae9183bd1a9206d81ef64bd50b120fafdb0a9e45713a3c0f7846c6578706572696d656e74616cf564736f6c63430008080041\"\n    }\n}\n","hash":"010000bbce462f415b68b139188c6d7391439925367fa27971671fbc736aa85f","factoryDependencies":{}}}}}}